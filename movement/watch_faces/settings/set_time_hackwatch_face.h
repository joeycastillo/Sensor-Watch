/*
 * MIT License
 *
 * Copyright (c) 2022 Joey Castillo
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef SET_TIME_HACKWATCH_FACE_H_
#define SET_TIME_HACKWATCH_FACE_H_

/*
 * SET TIME HACKWATCH
 *
 * This is an extended version of set_time face which allow setting seconds
 * precisely. To achieve that - press and hold alarm button few seconds before
 * 00 and release exaclty as reference clock turns 00.
 *
 * All settings can go up, or down (long alarm press).
 * 
 * The challenge is that SensorWatch display is delayed 0.5 seconds vs hardware
 * RTC clock. It is caused by interrupts being generated by raising edge of
 * counter. It means there is no way to precisely trigger at 0.5s, as events
 * at different frequencies slightly mismatch. This watch face achieves this
 * approximately by triggering at 15th out of 32Hz events.
 * 
 * If you are <30 seconds when setting seconds - you will stay in the same
 * minute. Otherwise - you will go to next minute. 
 * 
 * Note that changing anything will slightly delay subseconds counter. This
 * is why this face sets seconds last to achiveve best precision. Still,
 * best possible precision is achieved with finetune face. 
 */

#include "movement.h"

void set_time_hackwatch_face_setup(movement_settings_t *settings, uint8_t watch_face_index, void ** context_ptr);
void set_time_hackwatch_face_activate(movement_settings_t *settings, void *context);
bool set_time_hackwatch_face_loop(movement_event_t event, movement_settings_t *settings, void *context);
void set_time_hackwatch_face_resign(movement_settings_t *settings, void *context);

#define set_time_hackwatch_face ((const watch_face_t){ \
    set_time_hackwatch_face_setup, \
    set_time_hackwatch_face_activate, \
    set_time_hackwatch_face_loop, \
    set_time_hackwatch_face_resign, \
    NULL, \
})

#endif // SET_TIME_HACKWATCH_FACE_H_
